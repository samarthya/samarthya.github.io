---
title: "GitHub"
format:
  html:
    page-layout: full
---

<div class="github-nav">
  <a href="#activity" class="nav-item active" data-target="activity">Activity</a>
  <a href="#projects" class="nav-item" data-target="projects">Projects</a>
  <div class="nav-indicator"></div>
</div>

<div id="activity" class="content-section active">

```{python}
#| echo: false
#| output: asis
#| raw: true

import requests
from datetime import datetime, timedelta
import json
from IPython.display import HTML, display

def format_event_details(event):
    """Format event details based on event type"""
    event_type = event['type']
    repo_name = event['repo']['name']

    if event_type == 'PushEvent':
        commits = event['payload'].get('commits', [])
        commit_messages = [commit['message'] for commit in commits]
        description = f"Pushed {len(commits)} commit(s) to {repo_name}"
        details = "<br>".join(f"• {msg}" for msg in commit_messages[:3])
        if len(commits) > 3:
            details += "<br>• ..."
    elif event_type == 'CreateEvent':
        ref_type = event['payload']['ref_type']
        description = f"Created {ref_type} in {repo_name}"
        details = ""
    elif event_type == 'IssuesEvent':
        action = event['payload']['action']
        issue_title = event['payload']['issue']['title']
        description = f"{action.capitalize()} issue in {repo_name}"
        details = f"• {issue_title}"
    elif event_type == 'PullRequestEvent':
        action = event['payload']['action']
        pr_title = event['payload']['pull_request']['title']
        description = f"{action.capitalize()} pull request in {repo_name}"
        details = f"• {pr_title}"
    else:
        return None

    return {
        'description': description,
        'details': details,
        'repo_url': f"https://github.com/{repo_name}"
    }

def fetch_github_activity(username="samarthya", days=30):
    # Get user events
    url = f"https://api.github.com/users/{username}/events/public"
    response = requests.get(url)

    if response.status_code != 200:
        return []

    events = response.json()

    # Process and format events
    formatted_events = []
    for event in events:
        event_time = datetime.strptime(event['created_at'], '%Y-%m-%dT%H:%M:%SZ')

        # Skip events older than specified days
        if event_time < datetime.now() - timedelta(days=days):
            continue

        event_type = event['type']
        repo_name = event['repo']['name']

        # Format the event description based on type
        if event_type == 'PushEvent':
            commits = event['payload'].get('commits', [])
            commit_messages = [commit['message'] for commit in commits]
            description = f"Pushed {len(commits)} commit(s) to {repo_name}"
            details = "<br>".join(f"• {msg}" for msg in commit_messages[:3])
            if len(commits) > 3:
                details += "<br>• ..."
        elif event_type == 'CreateEvent':
            ref_type = event['payload']['ref_type']
            description = f"Created {ref_type} in {repo_name}"
            details = ""
        elif event_type == 'IssuesEvent':
            action = event['payload']['action']
            issue_title = event['payload']['issue']['title']
            description = f"{action.capitalize()} issue in {repo_name}"
            details = f"• {issue_title}"
        elif event_type == 'PullRequestEvent':
            action = event['payload']['action']
            pr_title = event['payload']['pull_request']['title']
            description = f"{action.capitalize()} pull request in {repo_name}"
            details = f"• {pr_title}"
        else:
            continue

        formatted_events.append({
            'date': event_time.strftime('%B %d, %Y'),
            'description': description,
            'details': details,
            'repo_url': f"https://github.com/{repo_name}"
        })

    return formatted_events

# Fetch and display activity
events = fetch_github_activity()

if events:
    html_content = '<div class="activity-timeline">'
    current_date = None

    for event in events:
        if event['date'] != current_date:
            if current_date is not None:
                html_content += '</div>'
            current_date = event['date']
            html_content += f'<div class="activity-date">{current_date}</div><div class="activity-group">'

        html_content += f'''
        <div class="activity-item">
            <div class="activity-dot"></div>
            <div class="activity-content">
                <a href="{event['repo_url']}" class="activity-link" target="_blank">{event['description']}</a>
                <div class="activity-details">{event['details']}</div>
            </div>
        </div>
        '''

    html_content += '</div></div>'

    display(HTML(html_content))
else:
    display(HTML('<p>No recent GitHub activity to display.</p>'))
```

</div>

<div id="projects" class="content-section">

```{python}
#| echo: false
#| output: asis
#| raw: true

import requests
import json
from datetime import datetime
from IPython.display import HTML, display

def fetch_github_repos(username="samarthya"):
    url = f"https://api.github.com/users/{username}/repos"
    response = requests.get(url)
    if response.status_code == 200:
        repos = response.json()
        # Sort by stars and get top 5
        return sorted(repos, key=lambda x: (x['stargazers_count'], x['forks_count']), reverse=True)[:5]
    return []

repos = fetch_github_repos()

# Build HTML content
html_content = '<div class="projects-grid">'
for repo in repos:
    # Format date
    updated_at = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ').strftime('%B %d, %Y')

    # Fix language color display
    language_color = repo['language'].lower() if repo['language'] else '#888'
    if language_color == 'java':
        language_color = '#b07219'  # Standard GitHub color for Java
    elif language_color == 'python':
        language_color = '#3572A5'  # Standard GitHub color for Python
    elif language_color == 'javascript':
        language_color = '#f1e05a'  # Standard GitHub color for JavaScript

    html_content += f"""
    <div class="project-card">
        <h3><a href="{repo['html_url']}" target="_blank">{repo['name']}</a></h3>
        <p class="description">{repo['description'] or 'No description available'}</p>
        <div class="stats">
            <span><i class="fas fa-star"></i> {repo['stargazers_count']}</span>
            <span><i class="fas fa-code-branch"></i> {repo['forks_count']}</span>
            <span><i class="fas fa-circle" style="color: {language_color};"></i> {repo['language'] or 'Unknown'}</span>
        </div>
        <div class="updated">Last updated: {updated_at}</div>
    </div>
    """
html_content += '</div>'

# Display the HTML content
display(HTML(html_content))
```

:::{.callout-note}
These are my top 5 GitHub repositories based on stars and forks. Click on any project to view its source code and documentation.
:::